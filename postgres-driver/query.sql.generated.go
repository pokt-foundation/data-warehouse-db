// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: query.sql

package postgresdriver

import (
	"context"
)

const insertNode = `-- name: InsertNode :exec
INSERT INTO node (
    node_address,
    node_average_latency,
    node_uptime_percentage,
    node_error_percentage,
    is_altruist_node,
    chain_id
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
`

type InsertNodeParams struct {
	NodeAddress          string `json:"nodeAddress"`
	NodeAverageLatency   int32  `json:"nodeAverageLatency"`
	NodeUptimePercentage int32  `json:"nodeUptimePercentage"`
	NodeErrorPercentage  int32  `json:"nodeErrorPercentage"`
	IsAltruistNode       bool   `json:"isAltruistNode"`
	ChainID              int32  `json:"chainID"`
}

func (q *Queries) InsertNode(ctx context.Context, arg InsertNodeParams) error {
	_, err := q.db.ExecContext(ctx, insertNode,
		arg.NodeAddress,
		arg.NodeAverageLatency,
		arg.NodeUptimePercentage,
		arg.NodeErrorPercentage,
		arg.IsAltruistNode,
		arg.ChainID,
	)
	return err
}

const insertNodeChain = `-- name: InsertNodeChain :exec
INSERT INTO node_chain (
    node_address,
    current_stake,
    chain_id
)
VALUES (
    $1,
    $2,
    $3
)
`

type InsertNodeChainParams struct {
	NodeAddress  string `json:"nodeAddress"`
	CurrentStake int64  `json:"currentStake"`
	ChainID      int32  `json:"chainID"`
}

func (q *Queries) InsertNodeChain(ctx context.Context, arg InsertNodeChainParams) error {
	_, err := q.db.ExecContext(ctx, insertNodeChain, arg.NodeAddress, arg.CurrentStake, arg.ChainID)
	return err
}

const selectNode = `-- name: SelectNode :one
SELECT
    node_id,
    node_address,
    node_average_latency,
    node_uptime_percentage,
    node_error_percentage,
    is_altruist_node,
    chain_id
FROM node
WHERE node_id = $1
`

func (q *Queries) SelectNode(ctx context.Context, nodeID int32) (Node, error) {
	row := q.db.QueryRowContext(ctx, selectNode, nodeID)
	var i Node
	err := row.Scan(
		&i.NodeID,
		&i.NodeAddress,
		&i.NodeAverageLatency,
		&i.NodeUptimePercentage,
		&i.NodeErrorPercentage,
		&i.IsAltruistNode,
		&i.ChainID,
	)
	return i, err
}

const selectNodeChain = `-- name: SelectNodeChain :one
SELECT
    node_chain_id,
    node_address,
    current_stake,
    chain_id
FROM node_chain
WHERE node_chain_id = $1
`

func (q *Queries) SelectNodeChain(ctx context.Context, nodeChainID int32) (NodeChain, error) {
	row := q.db.QueryRowContext(ctx, selectNodeChain, nodeChainID)
	var i NodeChain
	err := row.Scan(
		&i.NodeChainID,
		&i.NodeAddress,
		&i.CurrentStake,
		&i.ChainID,
	)
	return i, err
}
